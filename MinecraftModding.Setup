The way I set up the minecraft modding.
I followed this youtube video with a few exceptions since we're on MacOS:
https://youtu.be/N9E1mf8LJXg

In the vid he has you get latest Forge mdk:
https://files.minecraftforge.net/maven/net/minecraftforge/forge/index_1.13.2.html

Then you get the compatible java jdk:
https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
I got 1.8.0_202.jdk

Also get the Eclipse IDE:
https://www.eclipse.org/downloads/

Unzip the Forge mdk
Place all Forge files inside a folder that you will use for your modding.
for macOS I had to install gradle using homebrew:
https://docs.gradle.org/current/userguide/installation.html

Then you can navigate to your Modpack folder from within terminal
cd ~/Desktop/MinecraftMod/DrewCraftMod

Then use the gradlew command:
./gradlew eclipse

to compile or decomp or whatever it does.

Then run eclipse as he says in the end of the video.

I also added a custom function to my .bash_profile to do some things for me automatically with a single command:
Many times that file does not exist yet, so:
touch .bash_profile #creates file
sudo nano ~/.bash_profile #opens in editor to add the stuff below. Be sure that you created it in the home directory ( ~/)

# allow switching java versions
export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)
alias java8='export JAVA_HOME=$JAVA_8_HOME'
# add DrewCraftMod directory to PATH so that gradle can be in that directory and still accessed from outside
export PATH=$PATH:/path/goes/here/DrewCraftMod/bin
# make a mcdev function as a workaround until Eclipse "run" button works with beta Forge build
mcdev() {
  cd /path/to/DrewCraftMod
  ./gradlew runClient
}


Discussion from Video 4:
How to add custom stairs:
First create CustomBlockStairs class in a new package com.yourname.yourmodid.blocks, it extends BlockStairs and have a public constructor with (IBlockState, Properties) as parameters. You need to do this because forge have not fully deobfuscated the relevant classes so they had it protected.
Then go to your ItemList and BlockList and add your Block and Item.
In your main class add these into their respective method:
    ItemList.your_block = new ItemBlock(...).setRegistryName(location(“your_block”)),     \\Copy and paste from existing code to fill in the ... and do necessary changes.
    BlockList.your_block = new CustomBlockStairs(BlockList.your_origin_block.getDefaultState(), ...).setRegistryName(location(“your_block”)),         \\Same, replace ... by copying and pasting.

Texture part:
Go to the External Libraries, grab vanilla stairs’ json file and do necessary changes. You’ll need 5 json files, 1 in blockstates, 3 in models.block, 1 in models.item.

Finally, add your item to your language file.﻿
